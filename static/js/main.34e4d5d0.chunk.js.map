{"version":3,"sources":["DropzoneArea.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","container","display","flexDirection","margin","spacing","dropzone","alignItems","backgroundColor","borderColor","borderRadius","borderStyle","borderWidth","color","flex","marginBottom","outline","padding","transition","img","width","height","thumb","border","marginRight","boxSizing","thumbsContainer","flexWrap","marginTop","&:hover $removeBtn","opacity","thumbInner","minWidth","overflow","removeBtn","DropzoneArea","_ref","onChange","maxFileSize","acceptedFiles","filesLimit","multiple","errorMessages","dropzoneText","classes","_useState","useState","_useState2","Object","slicedToArray","files","setFiles","handleDelete","index","newFiles","filter","f","i","onDrop","length","alert","map","file","assign","preview","URL","createObjectURL","useEffect","forEach","revokeObjectURL","react_default","a","createElement","es","onDropRejected","rejectedFiles","message","rejectedFile","includes","type","fileType","size","fileSize","maxSize","accept","_ref2","getRootProps","getInputProps","className","Badge","key","name","badgeContent","Fab","onClick","Delete_default","src","defaultProps","App","console","log","src_DropzoneArea","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.34e4d5d0.chunk.js","sourcesContent":["import { Badge } from \"@material-ui/core\";\nimport Fab from \"@material-ui/core/Fab\";\nimport { Theme, makeStyles } from \"@material-ui/core/styles\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport React, { useEffect, useState } from \"react\";\nimport Dropzone, {\n  DropzoneInputProps,\n  DropzoneRootProps\n} from \"react-dropzone\";\n\ninterface Props {\n  onChange: (files: File[]) => any;\n  filesLimit: number;\n  acceptedFiles: string[];\n  maxFileSize: number;\n  multiple: boolean;\n  dropzoneText: string;\n  errorMessages: {\n    filesLimit: string;\n    fileSize: string;\n    fileType: string;\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    margin: theme.spacing(2)\n  },\n  dropzone: {\n    alignItems: \"center\",\n    backgroundColor: \"#fafafa\",\n    borderColor: \"#eeeeee\",\n    borderRadius: \"2px\",\n    borderStyle: \"dashed\",\n    borderWidth: \"2px\",\n    color: \"#bdbdbd\",\n    display: \"flex\",\n    flex: \"1\",\n    flexDirection: \"column\",\n    marginBottom: theme.spacing(1),\n    outline: \"none\",\n    padding: \"20px\",\n    transition: \"border .24s ease-in-out\"\n  },\n  img: {\n    display: \"block\",\n    width: \"auto\",\n    height: \"100%\"\n  },\n  thumb: {\n    display: \"inline-flex\",\n    borderRadius: 2,\n    border: \"1px solid #eaeaea\",\n    marginBottom: 8,\n    marginRight: 8,\n    width: 100,\n    height: 100,\n    padding: 4,\n    boxSizing: \"border-box\"\n  },\n  thumbsContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    marginTop: 16,\n    \"&:hover $removeBtn\": { opacity: 1 }\n  },\n  thumbInner: {\n    display: \"flex\",\n    minWidth: 0,\n    overflow: \"hidden\"\n  },\n  removeBtn: {\n    opacity: 0,\n    transition: \".5s ease\"\n  }\n}));\n\ninterface ExtendedFile extends File {\n  preview: string;\n}\n\nfunction DropzoneArea({\n  onChange,\n  maxFileSize,\n  acceptedFiles,\n  filesLimit,\n  multiple,\n  errorMessages,\n  dropzoneText\n}: Props) {\n  const classes = useStyles();\n  const [files, setFiles] = useState<ExtendedFile[]>([]);\n\n  const handleDelete = (index: number) => () => {\n    const newFiles = files.filter((f, i) => i !== index);\n    onDrop(newFiles);\n  };\n\n  const onDrop = (newFiles: File[]) => {\n    if (newFiles.length > filesLimit) {\n      return alert(errorMessages.filesLimit);\n    }\n\n    setFiles(\n      newFiles.map(file =>\n        Object.assign(file, {\n          preview: URL.createObjectURL(file)\n        })\n      )\n    );\n    onChange(newFiles);\n  };\n\n  const handleDropRejected = (rejectedFiles: File[]) => {\n    let message = \"\";\n    rejectedFiles.forEach(rejectedFile => {\n      if (!acceptedFiles.includes(rejectedFile.type)) {\n        message += errorMessages.fileType;\n      }\n      if (rejectedFile.size > maxFileSize) {\n        message += errorMessages.fileSize;\n      }\n    });\n    alert(message);\n  };\n\n  useEffect(\n    () => () => {\n      files.forEach((file: ExtendedFile) => URL.revokeObjectURL(file.preview));\n    },\n    [files]\n  );\n\n  return (\n    <Dropzone\n      onDrop={onDrop}\n      onDropRejected={handleDropRejected}\n      maxSize={maxFileSize}\n      accept={acceptedFiles}\n      multiple={multiple}\n    >\n      {({\n        getRootProps,\n        getInputProps\n      }: {\n        getRootProps: (args: { className: string }) => DropzoneRootProps;\n        getInputProps: () => DropzoneInputProps;\n      }) => (\n        <section className={classes.container}>\n          <div {...getRootProps({ className: classes.dropzone })}>\n            <input {...getInputProps()} />\n            <p>{dropzoneText}</p>\n          </div>\n          <aside className={classes.thumbsContainer}>\n            {files.map((file, index) => (\n              <Badge\n                key={file.name}\n                badgeContent={\n                  <Fab\n                    size=\"small\"\n                    className={classes.removeBtn}\n                    onClick={handleDelete(index)}\n                  >\n                    <DeleteIcon />\n                  </Fab>\n                }\n              >\n                <div className={classes.thumb}>\n                  <div className={classes.thumbInner}>\n                    <img src={file.preview} className={classes.img} />\n                  </div>\n                </div>\n              </Badge>\n            ))}\n          </aside>\n        </section>\n      )}\n    </Dropzone>\n  );\n}\n\nexport default DropzoneArea;\n\nDropzoneArea.defaultProps = {\n  acceptedFiles: [\"image/*\", \"video/*\", \"application/*\"],\n  filesLimit: 3,\n  maxFileSize: 3000000,\n  multiple: false,\n  onChange: () => {},\n  errorMessages: {\n    filesLimit: \"最大ファイル数を超えています。\",\n    fileSize: \"ファイル形式をサポートしていません。\",\n    fileType: \"ファイルサイズが大きすぎます。\"\n  },\n  dropzoneText: \"ファイルをドロップまたはファイルを選択する\"\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport DropzoneArea from \"./DropzoneArea\";\n\nconst App: React.FC = () => {\n  const [files, setFiles] = useState<File[]>([]);\n\n  useEffect(() => {\n    console.log(files);\n  }, [files]);\n\n  return (\n    <div className=\"App\">\n      <DropzoneArea onChange={setFiles} multiple={true} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}